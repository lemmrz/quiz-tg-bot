import { Scene, SceneEnter, Ctx, Action } from 'nestjs-telegraf';
import { Scenes } from 'telegraf';
import { BotService } from '../bot.serivce';
import { SceneNames } from '../bot.interfaces';

@Scene(SceneNames.LOOK_RESULTS)
export class LookResultsScene {
  constructor(private botService: BotService) {}

  @SceneEnter()
  async onEnter(@Ctx() ctx: Scenes.SceneContext) {
    const currentUser = await this.botService.getUser(ctx.from.username);
    if (!currentUser) {
      await ctx.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const quizzes = await this.botService.getQuizzesByUserId(currentUser.id);
    if (quizzes.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤.');
      await ctx.scene.leave();
      return;
    }

    const inlineKeyboard = quizzes.map((quiz) => ({
      text: quiz.title,
      callback_data: `select_quiz_${quiz.id}`,
    }));

    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', {
      reply_markup: {
        inline_keyboard: inlineKeyboard.map((quiz) => [quiz]),
      },
    });
  }

  @Action(/^select_quiz_(\d+)$/)
  async onSelectQuiz(@Ctx() ctx: Scenes.SceneContext) {
    const callbackQuery = ctx.callbackQuery as any;
    const quizId = Number(callbackQuery.data.split('_')[2]);

    const results = await this.botService.getResultsByQuizId(quizId);
    if (results.length === 0) {
      await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.');
      return;
    }

    // Create a list of results
    let resultMessage = `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:\n\n`;

    for (const result of results) {
      resultMessage += `üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á*: ${result.user.fullName} ${result.user.userName}\n`;
      resultMessage += `‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ*: ${result.correctAnswers}\n`;
      resultMessage += `‚ùì *–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω—å*: ${result.totalQuestions}\n`;
      resultMessage += `üïí *–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É*: ${result.startedAt.toLocaleString()}\n`;
      resultMessage += `üïí *–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è*: ${result.finishedAt.toLocaleString()}\n`;
      resultMessage += `‚è≥ *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å*: ${result.duration}\n`;
      resultMessage += `\n-----------------------------\n\n`;
    }

    // Send the formatted message
    await ctx.replyWithMarkdown(resultMessage);
  }
}
